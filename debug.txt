Code Delimiter HAI 
Variable List Delimiter WAZZUP 
Variable Declaration I HAS A 
Variable Identifier choice 
Variable Declaration I HAS A 
Variable Identifier input 
Variable List Delimiter BUHBYE 
Switch Block Delimiter WTF? 
Switch Case OMG 
Integer Literal 1 1
Output Keyword VISIBLE 
String Delimiter " 
String Literal Enter birth year:  Enter birth year: 
String Delimiter " 
Input Keyword GIMMEH 
Variable Identifier input 
Output Keyword VISIBLE 
Arithmetic Operator DIFF OF 
Integer Literal 2022 2022
Multiple Parameter Separator AN 
Variable Identifier input 
Break OR Return Statement Without Value GTFO 
Switch Case OMG 
Integer Literal 2 2
Output Keyword VISIBLE 
String Delimiter " 
String Literal Enter bill cost:  Enter bill cost: 
String Delimiter " 
Input Keyword GIMMEH 
Variable Identifier input 
Output Keyword VISIBLE 
String Delimiter " 
String Literal Tip:  Tip: 
String Delimiter " 
Visible Parameter Concatenator + 
Arithmetic Operator PRODUKT OF 
Variable Identifier input 
Multiple Parameter Separator AN 
Float Literal 0.1 0.1
Break OR Return Statement Without Value GTFO 
Switch Case OMG 
Integer Literal 3 3
Output Keyword VISIBLE 
String Delimiter " 
String Literal Enter width:  Enter width: 
String Delimiter " 
Input Keyword GIMMEH 
Variable Identifier input 
Output Keyword VISIBLE 
String Delimiter " 
String Literal Square Area:  Square Area: 
String Delimiter " 
Visible Parameter Concatenator + 
Arithmetic Operator PRODUKT OF 
Variable Identifier input 
Multiple Parameter Separator AN 
Variable Identifier input 
Break OR Return Statement Without Value GTFO 
Switch Case OMG 
Integer Literal 0 0
Output Keyword VISIBLE 
String Delimiter " 
String Literal Goodbye Goodbye
String Delimiter " 
Break OR Return Statement Without Value GTFO 
Default Switch Case OMGWTF 
Output Keyword VISIBLE 
String Delimiter " 
String Literal Invalid Input! Invalid Input!
String Delimiter " 
Conditional Block / Case Block Closer OIC 
Code Delimiter KTHXBYE 
popped: HAI
im here ofc
popped: WAZZUP
popped: I HAS A
popped: choice
popped: I HAS A
popped: input
popped: BUHBYE
popped: WTF?
now analyzing WTF?
parsing switch case
popped: OMG
popped: 1
parsing statements here
popped: VISIBLE
analyzing on sc mode
now analyzing VISIBLE
popped: "
now parsing on visible: "
this is very true
popped: Enter birth year: 
popped: "
[<lexer.token_class.TokenClass object at 0x101051400>]
--------
added statement: <parser.io.PrintStatement object at 0x1010d43b0>
statement_index: 0
next ind: 1
parsing statements here
popped: GIMMEH
analyzing on sc mode
now analyzing GIMMEH
popped: input
--------
added statement: <parser.io.InputStatement object at 0x101051520>
statement_index: 1
next ind: 2
parsing statements here
popped: VISIBLE
analyzing on sc mode
now analyzing VISIBLE
popped: DIFF OF
now parsing on visible: DIFF OF
headop: DIFF OF
op_c: 2
an_c: 1
popped: 2022
2022
added : 2022
popped: AN
op_c: 1
an_c: 0
popped: input
input
added : input
op_c: 0
an_c: 0
operand: 2
operator1
Arithmetic Operator DIFF OF 
[<parser.expression.ArithmeticExpression object at 0x1010d43e0>]
--------
added statement: <parser.io.PrintStatement object at 0x101051370>
statement_index: 2
next ind: 3
parsing statements here
popped: GTFO
analyzing on sc mode
now analyzing GTFO
--------
added statement: <parser.flow_control.Terminator object at 0x101051880>
statement_index: 3
next ind: 4
parsing statements here
hello crushiecakes
parsing TokenType.OMG with lexeme  OMG
popped: OMG
popped: 2
popped: VISIBLE
analyzing on sc mode
now analyzing VISIBLE
popped: "
now parsing on visible: "
this is very true
popped: Enter bill cost: 
popped: "
[<lexer.token_class.TokenClass object at 0x101051a00>]
--------
added statement: <parser.io.PrintStatement object at 0x1010d4410>
statement_index: 4
next ind: 5
popped: GIMMEH
analyzing on sc mode
now analyzing GIMMEH
popped: input
--------
added statement: <parser.io.InputStatement object at 0x1010519a0>
statement_index: 5
next ind: 6
popped: VISIBLE
analyzing on sc mode
now analyzing VISIBLE
popped: "
now parsing on visible: "
this is very true
popped: Tip: 
popped: "
popped: +
popped: PRODUKT OF
now parsing on visible: PRODUKT OF
headop: PRODUKT OF
op_c: 2
an_c: 1
popped: input
input
added : input
popped: AN
op_c: 1
an_c: 0
popped: 0.1
0.1
added : 0.1
op_c: 0
an_c: 0
operand: 2
operator1
Arithmetic Operator PRODUKT OF 
[<lexer.token_class.TokenClass object at 0x101051b50>, <parser.expression.ArithmeticExpression object at 0x101051a90>]
--------
added statement: <parser.io.PrintStatement object at 0x1010518b0>
statement_index: 6
next ind: 7
popped: GTFO
analyzing on sc mode
now analyzing GTFO
--------
added statement: <parser.flow_control.Terminator object at 0x101051cd0>
statement_index: 7
next ind: 8
hello crushiecakes
parsing TokenType.OMG with lexeme  OMG
popped: OMG
popped: 3
popped: VISIBLE
analyzing on sc mode
now analyzing VISIBLE
popped: "
now parsing on visible: "
this is very true
popped: Enter width: 
popped: "
[<lexer.token_class.TokenClass object at 0x101051f40>]
--------
added statement: <parser.io.PrintStatement object at 0x101051c10>
statement_index: 8
next ind: 9
popped: GIMMEH
analyzing on sc mode
now analyzing GIMMEH
popped: input
--------
added statement: <parser.io.InputStatement object at 0x101051ee0>
statement_index: 9
next ind: 10
popped: VISIBLE
analyzing on sc mode
now analyzing VISIBLE
popped: "
now parsing on visible: "
this is very true
popped: Square Area: 
popped: "
popped: +
popped: PRODUKT OF
now parsing on visible: PRODUKT OF
headop: PRODUKT OF
op_c: 2
an_c: 1
popped: input
input
added : input
popped: AN
op_c: 1
an_c: 0
popped: input
input
added : input
op_c: 0
an_c: 0
operand: 2
operator1
Arithmetic Operator PRODUKT OF 
[<lexer.token_class.TokenClass object at 0x1010520f0>, <parser.expression.ArithmeticExpression object at 0x101051fd0>]
--------
added statement: <parser.io.PrintStatement object at 0x101051d90>
statement_index: 10
next ind: 11
popped: GTFO
analyzing on sc mode
now analyzing GTFO
--------
added statement: <parser.flow_control.Terminator object at 0x1010521e0>
statement_index: 11
next ind: 12
hello crushiecakes
parsing TokenType.OMG with lexeme  OMG
popped: OMG
popped: 0
popped: VISIBLE
analyzing on sc mode
now analyzing VISIBLE
popped: "
now parsing on visible: "
this is very true
popped: Goodbye
popped: "
[<lexer.token_class.TokenClass object at 0x101052300>]
--------
added statement: <parser.io.PrintStatement object at 0x101052090>
statement_index: 12
next ind: 13
popped: GTFO
analyzing on sc mode
now analyzing GTFO
--------
added statement: <parser.flow_control.Terminator object at 0x1010523f0>
statement_index: 13
next ind: 14
hello crushiecakes
hey i got here
popped: OMGWTF
popped: VISIBLE
analyzing on sc mode
now analyzing VISIBLE
popped: "
now parsing on visible: "
this is very true
popped: Invalid Input!
popped: "
[<lexer.token_class.TokenClass object at 0x101052630>]
--------
added statement: <parser.io.PrintStatement object at 0x1010d4440>
statement_index: 14
next ind: 15
hello crushiecakes
i am reached
popped: OIC
[0, 4, 8, 12]
defalut index: 14
['<parser.io.PrintStatement object at 0x1010d43b0>', '<parser.io.InputStatement object at 0x101051520>', '<parser.io.PrintStatement object at 0x101051370>', '<parser.flow_control.Terminator object at 0x101051880>', '<parser.io.PrintStatement object at 0x1010d4410>', '<parser.io.InputStatement object at 0x1010519a0>', '<parser.io.PrintStatement object at 0x1010518b0>', '<parser.flow_control.Terminator object at 0x101051cd0>', '<parser.io.PrintStatement object at 0x101051c10>', '<parser.io.InputStatement object at 0x101051ee0>', '<parser.io.PrintStatement object at 0x101051d90>', '<parser.flow_control.Terminator object at 0x1010521e0>', '<parser.io.PrintStatement object at 0x101052090>', '<parser.flow_control.Terminator object at 0x1010523f0>', '<parser.io.PrintStatement object at 0x1010d4440>']
popped: KTHXBYE
